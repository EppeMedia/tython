#N-body benchmark from the Computer Language Benchmarks Game.
#
#This is intended to support Unladen Swallow's pyperf.py. Accordingly, it has been
#modified from the Shootout version:
#- Accept standard Unladen Swallow benchmark options.
#- Run report_energy()/advance() in a loop.
#- Reimplement itertools.combinations() to work with older Python versions.
#
#Pulled from:
#http://benchmarksgame.alioth.debian.org/u64q/program.php?test=nbody&lang=python3&id=1
#
#Contributed by Kevin Carson.
#Modified by Tupteq, Fredrik Johansson, and Daniel Nanz.

__contact__ = "collinwinter@google.com (Collin Winter)"
DEFAULT_ITERATIONS = 1000#20000
DEFAULT_REFERENCE = "sun"
DEFAULT_LOOPS = 100

ZERO = 0
ZERO_F = 0.0
ZERO_DOT_ZERO_ONE = 0.01
ZERO_DOT_FIVE = 0.5
ONE = 1
NEG_ONE_DOT_FIVE = -1.5
TWO = 2
TWO_DOT_ZERO = 2.0

def combinations(l):
#    """Pure-Python implementation of itertools.combinations(l, 2)."""
    #print("l[0]:")
    #print(l[0])
    result = []
    q = len(l) - ONE

    #print("Here")

    for x in range(ZERO, q, ONE):

        #print("x:")
        #print(x)

        i = x + ONE

        #print("x:")
        #print(x)

        ls = l[i:]
        for y in ls:
            #print("y:")
            #print(y)
            tup = (l[x], y)
            #print("x:")
            #print(x)
            #print("l[x]:")
            #print(l[x])
            #print("tup")
            #print(tup)
            result.append(tup)
            #print("appended")

#    print("result:")
#    print(result)
    return result


PI = 3.14159265358979323
SOLAR_MASS = 4.0 * PI * PI
DAYS_PER_YEAR = 365.24

BODIES = {
    "sun": ([ZERO_F, ZERO_F, ZERO_F], [ZERO_F, ZERO_F, ZERO_F], SOLAR_MASS),

    "jupiter": ([4.84143144246472090e+00,
                 -1.16032004402742839e+00,
                 -1.03622044471123109e-01],
                [1.66007664274403694e-03 * DAYS_PER_YEAR,
                 7.69901118419740425e-03 * DAYS_PER_YEAR,
                 -6.90460016972063023e-05 * DAYS_PER_YEAR],
                9.54791938424326609e-04 * SOLAR_MASS),

    "saturn": ([8.34336671824457987e+00,
                4.12479856412430479e+00,
                -4.03523417114321381e-01],
               [-2.76742510726862411e-03 * DAYS_PER_YEAR,
                4.99852801234917238e-03 * DAYS_PER_YEAR,
                2.30417297573763929e-05 * DAYS_PER_YEAR],
               2.85885980666130812e-04 * SOLAR_MASS),

    "uranus": ([1.28943695621391310e+01,
                -1.51111514016986312e+01,
                -2.23307578892655734e-01],
               [2.96460137564761618e-03 * DAYS_PER_YEAR,
                2.37847173959480950e-03 * DAYS_PER_YEAR,
                -2.96589568540237556e-05 * DAYS_PER_YEAR],
               4.36624404335156298e-05 * SOLAR_MASS),

    "neptune": ([1.53796971148509165e+01,
                 -2.59193146099879641e+01,
                 1.79258772950371181e-01],
                [2.68067772490389322e-03 * DAYS_PER_YEAR,
                 1.62824170038242295e-03 * DAYS_PER_YEAR,
                 -9.51592254519715870e-05 * DAYS_PER_YEAR],
                5.15138902046611451e-05 * SOLAR_MASS)
}

SYSTEM = list(BODIES.values())
PAIRS = combinations(SYSTEM)

def advance(dt, n):
    for i in range(ZERO, n, ONE):
        for p in PAIRS:

            x1 = p[ZERO][ZERO][ZERO]
            y1 = p[ZERO][ZERO][ONE]
            z1 = p[ZERO][ZERO][TWO]
            v1 = p[ZERO][ONE]
            m1 = p[ZERO][TWO]

            x2 = p[ONE][ZERO][ZERO]
            y2 = p[ONE][ZERO][ONE]
            z2 = p[ONE][ZERO][TWO]
            v2 = p[ONE][ONE]
            m2 = p[ONE][TWO]

            dx = x1 - x2
            dy = y1 - y2
            dz = z1 - z2
            mag = dt * ((dx * dx + dy * dy + dz * dz) ** (NEG_ONE_DOT_FIVE))
            b1m = m1 * mag
            b2m = m2 * mag
            v1[ZERO] -= dx * b2m
            v1[ONE] -= dy * b2m
            v1[TWO] -= dz * b2m
            v2[ZERO] += dx * b1m
            v2[ONE] += dy * b1m
            v2[TWO] += dz * b1m

        for b in SYSTEM:

            r = b[ZERO]
            vx = b[ONE][ZERO]
            vy = b[ONE][ONE]
            vz = b[ONE][TWO]
            m = b[TWO]

            r[ZERO] += dt * vx
            r[ONE] += dt * vy
            r[TWO] += dt * vz

def report_energy():

    e = ZERO_F

    for p in PAIRS:

        #print("Pair:")
        #print(p)

        x1 = p[ZERO][ZERO][ZERO]
        y1 = p[ZERO][ZERO][ONE]
        z1 = p[ZERO][ZERO][TWO]
        v1 = p[ZERO][ONE]
        m1 = p[ZERO][TWO]

        x2 = p[ONE][ZERO][ZERO]
        y2 = p[ONE][ZERO][ONE]
        z2 = p[ONE][ZERO][TWO]
        v2 = p[ONE][ONE]
        m2 = p[ONE][TWO]

        dx = x1 - x2
        dy = y1 - y2
        dz = z1 - z2

        #print("Here we go:")
        #print(m1)
        #print(m2)
        #print(dx)
        #print(dy)
        #print(dz)
        #print(ZERO_DOT_FIVE)
        #print("OK")
        nop = (m1 * m2) / ((dx * dx + dy * dy + dz * dz) ** ZERO_DOT_FIVE)
        #print("Nop:")
        #print(nop)
        e -= nop
        #print("_E:")
        #print(e)

    for b in SYSTEM:

        #print("b:")
        #print(b)

        r = b[ZERO]
        vx = b[ONE][ZERO]
        vy = b[ONE][ONE]
        vz = b[ONE][TWO]
        m = b[TWO]

        yup = m * (vx * vx + vy * vy + vz * vz) / TWO_DOT_ZERO
        #print("Yup:")
        #print(yup)
        e += yup
        #print("E:")
        #print(e)

    #print("Energy:")
    #print(e)
    return e


def offset_momentum(ref):

    px=ZERO_F
    py=ZERO_F
    pz=ZERO_F

    for b in SYSTEM:

        r = b[ZERO]
        vx = b[ONE][ZERO]
        vy = b[ONE][ONE]
        vz = b[ONE][TWO]
        m = b[TWO]

        px -= vx * m
        py -= vy * m
        pz -= vz * m

    v = ref[ONE]
    m = ref[TWO]

    v[ZERO] = px / m
    v[ONE] = py / m
    v[TWO] = pz / m

def bench_nbody(loops, reference, iterations):
    # Set up global state
    offset_momentum(BODIES[reference])

    range_it = range(ZERO, loops, ONE)

    for _ in range_it:
        report_energy()
        advance(ZERO_DOT_ZERO_ONE, iterations)
        report_energy()

bench_nbody(DEFAULT_LOOPS, DEFAULT_REFERENCE, DEFAULT_ITERATIONS)
