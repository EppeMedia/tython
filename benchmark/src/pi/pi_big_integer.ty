#Calculating some of the digits of Ï€.
#
#This benchmark stresses big integer arithmetic.
#
#Adapted from code on:
#http://benchmarksgame.alioth.debian.org/

DEFAULT_DIGITS = 10#2000

count = 0

def gen_x():
    global count
    count += 1
    return (count, 4 * count + 2, 0, 2 * count + 1);

def compose(a, b):

    aq = a[0]
    ar = a[1]
    as_ = a[2]
    at = a[3]

    bq = b[0]
    br = b[1]
    bs = b[2]
    bt = b[3]

    return (aq * bq,
            aq * br + ar * bt,
            as_ * bq + at * bs,
            as_ * br + at * bt)


def extract(z, j):

    q = z[0]
    r = z[1]
    s = z[2]
    t = z[3]

    return (q * j + r) // (s * j + t)


def gen_pi_digits(n):
    z = (1, 0, 0, 1)

    count = 0

    result = []

    for i in range (0, n):
        y = extract(z, 3)


        while y != extract(z, 4):
            # OK
            z = compose(z, gen_x())
            print(z)
            y = extract(z, 3)

        z = compose((10, -10 * y, 0, 1), z)

        print(y)
        result.append(y)

    return result

def calc_ndigits(n):
    return gen_pi_digits(n)

result = calc_ndigits(DEFAULT_DIGITS)

print(result)
