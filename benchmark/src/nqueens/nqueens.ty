# Adapted from https://www.geeksforgeeks.org/python-program-for-n-queen-problem-backtracking-3/
import util

N = 18

def isSafe(board, row, col):

    for i in range(0, col):
        if board[row][i] == 1:
            return False

    for z in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[z[0]][z[1]] == 1:
            return False

    for z in zip(range(row, N, 1), range(col, -1, -1)):
        if board[z[0]][z[1]] == 1:
            return False

    return True

def solveNQUtil(board, col):
    if col >= N:
        return True

    for i in range(0, N):

        if isSafe(board, i, col):
            board[i][col] = 1

            if solveNQUtil(board, col + 1) == True:
                return True

            board[i][col] = 0

    return False

def solveNQ():

    board = []
    for _ in range(0, N):
        row = []
        for _ in range(0, N):
            row.append(0)
        board.append(row)

    solveNQUtil(board, 0)
    print(board)

solveNQ()
