; ModuleID = 'module'
source_filename = "module"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%Variable = type { ptr, ptr }
%Value.String = type { i8, ptr }

@a = internal global %Variable zeroinitializer

declare i32 @printf(ptr %malloc_ptr, ...)

declare ptr @malloc(i32 %malloc_ptr)

define void @main() {
entry:
  
  %string_ptr = call ptr @malloc(i32 12)
  store [12 x i8] c"Hello world\00", ptr %string_ptr, align 1 ; copies by value!

  %value_malloc = call ptr @malloc(i32 16)
  %value_gep = getelementptr %Value.String, ptr %value_malloc, i32 0, i32 1
  store ptr %string_ptr, ptr %value_gep, align 8

  store ptr %value_malloc, ptr getelementptr inbounds (%Variable, ptr @a, i32 0, i32 1), align 8

  %msg_malloc = call ptr @malloc(i32 12)
  store [12 x i8] c"Message: %s\00", ptr %msg_malloc, align 1
  %msg_value_malloc = call ptr @malloc(i32 16)
  %msg_value_gep = getelementptr %Value.String, ptr %msg_value_malloc, i32 0, i32 1
  store ptr %msg_malloc, ptr %msg_value_gep, align 8
  %msg_value_gep2 = getelementptr %Value.String, ptr %msg_value_malloc, i32 0, i32 1
  %load_msg = load ptr, ptr %msg_value_gep2, align 8

  ;%5 = load ptr, ptr getelementptr (%Value.String, ptr getelementptr inbounds (%Variable, ptr @a, i32 0, i32 1), i32 0, i32 1), align 8

  ;%loada = load ptr, ptr @a, align 1
  ;%5 = getelementptr %Variable, ptr %loada, i32 0, i32 1


  %a_gep = getelementptr %Variable, ptr @a, i32 0, i32 1
  %v = load ptr, ptr %a_gep, align 1
  %a_value_gep = getelementptr %Value.String, ptr %v, i32 0, i32 1






  %load_gep = load ptr, ptr %a_value_gep, align 1


  %result = call i32 (ptr, ...) @printf(ptr %load_msg, ptr %load_gep)

  ret void
}
