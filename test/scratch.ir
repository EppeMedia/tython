; ModuleID = 'module'
source_filename = "module"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%Value.String = type { i8, ptr }
%Variable = type { ptr, ptr }

declare i32 @printf(ptr %0, ...)

declare ptr @malloc(i32 %0)

define common void @main() {
entry:
  %0 = call ptr @malloc(i32 7)
  store [7 x i8] c"param1\00", ptr %0, align 1
  %1 = call ptr @malloc(i32 16)
  %2 = bitcast ptr %1 to ptr
  store i8 3, ptr %2, align 1
  %3 = getelementptr %Value.String, ptr %1, i32 0, i32 1
  store ptr %0, ptr %3, align 8
  %4 = call ptr @malloc(i32 7)
  store [7 x i8] c"param2\00", ptr %4, align 1
  %5 = call ptr @malloc(i32 16)
  %6 = bitcast ptr %5 to ptr
  store i8 3, ptr %6, align 1
  %7 = getelementptr %Value.String, ptr %5, i32 0, i32 1
  store ptr %4, ptr %7, align 8
  call void @foo(ptr %1, ptr %5)
  ret void
}

define internal void @foo(ptr %0, ptr %1) {
prologue:
  %arg1 = alloca %Variable, align 8
  %2 = getelementptr %Variable, ptr %arg1, i32 0, i32 1
  store ptr %0, ptr %2, align 8
  %arg2 = alloca %Variable, align 8
  %3 = getelementptr %Variable, ptr %arg2, i32 0, i32 1
  store ptr %1, ptr %3, align 8
  %4 = call ptr @malloc(i32 12)
  store [12 x i8] c"Foo: %s, %s\00", ptr %4, align 1
  %5 = alloca %Value.String, align 8
  %6 = bitcast ptr %5 to ptr
  store i8 3, ptr %6, align 1
  %7 = getelementptr %Value.String, ptr %5, i32 0, i32 1
  store ptr %4, ptr %7, align 8
  %8 = getelementptr %Variable, ptr %arg1, i32 0, i32 1
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr %Variable, ptr %arg2, i32 0, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr %Value.String, ptr %5, i32 0, i32 1
  %13 = load ptr, ptr %12, align 8
  %14 = getelementptr %Value.String, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr %Value.String, ptr %11, i32 0, i32 1
  %17 = load ptr, ptr %16, align 8
  %18 = call i32 (ptr, ...) @printf(ptr %13, ptr %15, ptr %17)
  ret void
}
