; ModuleID = 'module'
source_filename = "module"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%Variable = type { ptr, ptr }
%Value.String = type { i8, ptr }
%Value.Unknown = type { i8, ptr }
%Value.Int = type { i8, i64 }

@foo = internal global %Variable zeroinitializer

declare i32 @printf(ptr %0, ...)

declare ptr @malloc(i32 %0)

define common void @main() {
entry:
  %0 = call ptr @malloc(i32 3)
  store [3 x i8] c"%s\00", ptr %0, align 1
  %1 = call ptr @malloc(i32 16)
  %2 = bitcast ptr %1 to ptr
  store i8 3, ptr %2, align 1
  %3 = getelementptr %Value.String, ptr %1, i32 0, i32 1
  store ptr %0, ptr %3, align 8
  %4 = call ptr @malloc(i32 6)
  store [6 x i8] c"Start\00", ptr %4, align 1
  %5 = call ptr @malloc(i32 16)
  %6 = bitcast ptr %5 to ptr
  store i8 3, ptr %6, align 1
  %7 = getelementptr %Value.String, ptr %5, i32 0, i32 1
  store ptr %4, ptr %7, align 8
  %8 = getelementptr %Value.String, ptr %1, i32 0, i32 1
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr %Value.String, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %10, align 8
  %12 = call i32 (ptr, ...) @printf(ptr %9, ptr %11)
  %13 = call ptr @malloc(i32 16)
  %14 = bitcast ptr %13 to ptr
  store i8 5, ptr %14, align 1
  %15 = getelementptr %Value.Unknown, ptr %13, i32 0, i32 1
  store i32 %12, ptr %15, align 4
  %16 = call ptr @malloc(i32 12)
  %17 = bitcast ptr %16 to ptr
  store i8 1, ptr %17, align 1
  %18 = getelementptr %Value.Int, ptr %16, i32 0, i32 1
  store i64 42, ptr %18, align 4
  store ptr %16, ptr getelementptr inbounds (%Variable, ptr @foo, i32 0, i32 1), align 8
  %19 = load ptr, ptr getelementptr inbounds (%Variable, ptr @foo, i32 0, i32 1), align 8
  call void @print(ptr %19)
  %20 = call ptr @malloc(i32 3)
  store [3 x i8] c"%s\00", ptr %20, align 1
  %21 = call ptr @malloc(i32 16)
  %22 = bitcast ptr %21 to ptr
  store i8 3, ptr %22, align 1
  %23 = getelementptr %Value.String, ptr %21, i32 0, i32 1
  store ptr %20, ptr %23, align 8
  %24 = call ptr @malloc(i32 5)
  store [5 x i8] c"Done\00", ptr %24, align 1
  %25 = call ptr @malloc(i32 16)
  %26 = bitcast ptr %25 to ptr
  store i8 3, ptr %26, align 1
  %27 = getelementptr %Value.String, ptr %25, i32 0, i32 1
  store ptr %24, ptr %27, align 8
  %28 = getelementptr %Value.String, ptr %21, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr %Value.String, ptr %25, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = call i32 (ptr, ...) @printf(ptr %29, ptr %31)
  %33 = call ptr @malloc(i32 16)
  %34 = bitcast ptr %33 to ptr
  store i8 5, ptr %34, align 1
  %35 = getelementptr %Value.Unknown, ptr %33, i32 0, i32 1
  store i32 %32, ptr %35, align 4
  ret void
}

define internal ptr @type(ptr %0) {
prologue:
  %1 = bitcast ptr %0 to ptr
  %2 = load i8, ptr %1, align 1
  %3 = call ptr @malloc(i32 12)
  %4 = bitcast ptr %3 to ptr
  store i8 1, ptr %4, align 1
  %5 = getelementptr %Value.Int, ptr %3, i32 0, i32 1
  store i8 %2, ptr %5, align 1
  ret ptr %3
}

define internal void @print(ptr %0) {
prologue:
  %arg = alloca %Variable, align 8
  %1 = getelementptr %Variable, ptr %arg, i32 0, i32 1
  store ptr %0, ptr %1, align 8
  %2 = getelementptr %Variable, ptr %arg, i32 0, i32 1
  %3 = load ptr, ptr %2, align 8
  %4 = call ptr @type(ptr %3)
  %type = alloca %Variable, align 8
  %5 = getelementptr %Variable, ptr %type, i32 0, i32 1
  store ptr %4, ptr %5, align 8
  %6 = getelementptr %Variable, ptr %type, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = alloca %Value.Int, align 8
  %9 = bitcast ptr %8 to ptr
  store i8 1, ptr %9, align 1
  %10 = getelementptr %Value.Int, ptr %8, i32 0, i32 1
  store i64 1, ptr %10, align 4
  %11 = getelementptr %Value.Int, ptr %7, i32 0, i32 1
  %12 = load i64, ptr %11, align 4
  %13 = getelementptr %Value.Int, ptr %8, i32 0, i32 1
  %14 = load i64, ptr %13, align 4
  %15 = icmp eq i64 %12, %14
  %16 = alloca %Value.Int, align 8
  %17 = bitcast ptr %16 to ptr
  store i8 1, ptr %17, align 1
  %18 = getelementptr %Value.Int, ptr %16, i32 0, i32 1
  store i1 %15, ptr %18, align 1
  %19 = getelementptr %Value.Int, ptr %16, i32 0, i32 1
  %20 = load i64, ptr %19, align 4
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %if, label %else_if

if:                                               ; preds = %prologue
  %22 = call ptr @malloc(i32 3)
  store [3 x i8] c"%u\00", ptr %22, align 1
  %23 = alloca %Value.String, align 8
  %24 = bitcast ptr %23 to ptr
  store i8 3, ptr %24, align 1
  %25 = getelementptr %Value.String, ptr %23, i32 0, i32 1
  store ptr %22, ptr %25, align 8
  %26 = getelementptr %Variable, ptr %arg, i32 0, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr %Value.String, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr %Value.Unknown, ptr %27, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = call i32 (ptr, ...) @printf(ptr %29, ptr %31)
  %33 = alloca %Value.Unknown, align 8
  %34 = bitcast ptr %33 to ptr
  store i8 5, ptr %34, align 1
  %35 = getelementptr %Value.Unknown, ptr %33, i32 0, i32 1
  store i32 %32, ptr %35, align 4
  br label %end_if

else_if:                                          ; preds = %prologue
  %36 = getelementptr %Variable, ptr %type, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = alloca %Value.Int, align 8
  %39 = bitcast ptr %38 to ptr
  store i8 1, ptr %39, align 1
  %40 = getelementptr %Value.Int, ptr %38, i32 0, i32 1
  store i64 3, ptr %40, align 4
  %41 = getelementptr %Value.Int, ptr %37, i32 0, i32 1
  %42 = load i64, ptr %41, align 4
  %43 = getelementptr %Value.Int, ptr %38, i32 0, i32 1
  %44 = load i64, ptr %43, align 4
  %45 = icmp eq i64 %42, %44
  %46 = alloca %Value.Int, align 8
  %47 = bitcast ptr %46 to ptr
  store i8 1, ptr %47, align 1
  %48 = getelementptr %Value.Int, ptr %46, i32 0, i32 1
  store i1 %45, ptr %48, align 1
  %49 = getelementptr %Value.Int, ptr %46, i32 0, i32 1
  %50 = load i64, ptr %49, align 4
  %51 = icmp sgt i64 %50, 0
  br i1 %51, label %if1, label %else3

end_if:                                           ; preds = %if1, %else3, %if
  ret void

if1:                                              ; preds = %else_if
  %52 = call ptr @malloc(i32 3)
  store [3 x i8] c"%s\00", ptr %52, align 1
  %53 = alloca %Value.String, align 8
  %54 = bitcast ptr %53 to ptr
  store i8 3, ptr %54, align 1
  %55 = getelementptr %Value.String, ptr %53, i32 0, i32 1
  store ptr %52, ptr %55, align 8
  %56 = getelementptr %Variable, ptr %arg, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr %Value.String, ptr %53, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr %Value.Unknown, ptr %57, i32 0, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = call i32 (ptr, ...) @printf(ptr %59, ptr %61)
  %63 = alloca %Value.Unknown, align 8
  %64 = bitcast ptr %63 to ptr
  store i8 5, ptr %64, align 1
  %65 = getelementptr %Value.Unknown, ptr %63, i32 0, i32 1
  store i32 %62, ptr %65, align 4
  br label %end_if

else3:                                            ; preds = %else_if
  %66 = call ptr @malloc(i32 3)
  store [3 x i8] c"%s\00", ptr %66, align 1
  %67 = alloca %Value.String, align 8
  %68 = bitcast ptr %67 to ptr
  store i8 3, ptr %68, align 1
  %69 = getelementptr %Value.String, ptr %67, i32 0, i32 1
  store ptr %66, ptr %69, align 8
  %70 = getelementptr %Variable, ptr %arg, i32 0, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = getelementptr %Value.String, ptr %67, i32 0, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = getelementptr %Value.Unknown, ptr %71, i32 0, i32 1
  %75 = load ptr, ptr %74, align 8
  %76 = call i32 (ptr, ...) @printf(ptr %73, ptr %75)
  %77 = alloca %Value.Unknown, align 8
  %78 = bitcast ptr %77 to ptr
  store i8 5, ptr %78, align 1
  %79 = getelementptr %Value.Unknown, ptr %77, i32 0, i32 1
  store i32 %76, ptr %79, align 4
  br label %end_if
}
