; ModuleID = 'module'
source_filename = "module"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%Variable = type { ptr, ptr }
%Value.String = type { i8, ptr }

@a = internal global %Variable zeroinitializer
@b = internal global %Variable zeroinitializer

declare i32 @printf(ptr %0, ...)

declare ptr @malloc(i32 %0)

define common void @main() {
entry:
  %0 = call ptr @malloc(i32 12)
  store [12 x i8] c"Hello world\00", ptr %0, align 1
  %1 = call ptr @malloc(i32 16)
  %2 = bitcast ptr %1 to ptr
  store i8 3, ptr %2, align 1
  %3 = getelementptr %Value.String, ptr %1, i32 0, i32 1
  store ptr %0, ptr %3, align 8
  store ptr %1, ptr getelementptr inbounds (%Variable, ptr @a, i32 0, i32 1), align 8
  %4 = call ptr @malloc(i32 12)
  store [12 x i8] c"Message: %s\00", ptr %4, align 1
  %5 = call ptr @malloc(i32 16)
  %6 = bitcast ptr %5 to ptr
  store i8 3, ptr %6, align 1
  %7 = getelementptr %Value.String, ptr %5, i32 0, i32 1
  store ptr %4, ptr %7, align 8
  %8 = load ptr, ptr getelementptr inbounds (%Variable, ptr @a, i32 0, i32 1), align 8
  %9 = getelementptr %Value.String, ptr %5, i32 0, i32 1
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr %Value.String, ptr %8, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = call i32 (ptr, ...) @printf(ptr %10, ptr %12)
  %14 = call ptr @malloc(i32 4)
  store [4 x i8] c"bar\00", ptr %14, align 1
  %15 = call ptr @malloc(i32 16)
  %16 = bitcast ptr %15 to ptr
  store i8 3, ptr %16, align 1
  %17 = getelementptr %Value.String, ptr %15, i32 0, i32 1
  store ptr %14, ptr %17, align 8
  store ptr %15, ptr getelementptr inbounds (%Variable, ptr @b, i32 0, i32 1), align 8
  call void @foo()
  %18 = call ptr @malloc(i32 12)
  store [12 x i8] c"Message: %s\00", ptr %18, align 1
  %19 = call ptr @malloc(i32 16)
  %20 = bitcast ptr %19 to ptr
  store i8 3, ptr %20, align 1
  %21 = getelementptr %Value.String, ptr %19, i32 0, i32 1
  store ptr %18, ptr %21, align 8
  %22 = call ptr @malloc(i32 4)
  store [4 x i8] c"bye\00", ptr %22, align 1
  %23 = call ptr @malloc(i32 16)
  %24 = bitcast ptr %23 to ptr
  store i8 3, ptr %24, align 1
  %25 = getelementptr %Value.String, ptr %23, i32 0, i32 1
  store ptr %22, ptr %25, align 8
  %26 = getelementptr %Value.String, ptr %19, i32 0, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr %Value.String, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 (ptr, ...) @printf(ptr %27, ptr %29)
  ret void
}

define internal void @foo() {
prologue:
  %0 = call ptr @malloc(i32 8)
  store [8 x i8] c"Foo: %s\00", ptr %0, align 1
  %1 = alloca %Value.String, align 8
  %2 = bitcast ptr %1 to ptr
  store i8 3, ptr %2, align 1
  %3 = getelementptr %Value.String, ptr %1, i32 0, i32 1
  store ptr %0, ptr %3, align 8
  %4 = load ptr, ptr getelementptr inbounds (%Variable, ptr @b, i32 0, i32 1), align 8
  %5 = getelementptr %Value.String, ptr %1, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr %Value.String, ptr %4, i32 0, i32 1
  %8 = load ptr, ptr %7, align 8
  %9 = call i32 (ptr, ...) @printf(ptr %6, ptr %8)
  ret void
}
